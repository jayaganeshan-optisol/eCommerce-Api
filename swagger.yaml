openapi: 3.0.0
info:
  title: Sample API
  description: ""
  version: 1.0.0
servers:
  - url: http://localhost:3000
paths:
  /register:
    post:
      tags:
        - user
      summary: "Returns a User object"
      requestBody:
        description: Create User
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUser"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /login:
    post:
      tags:
        - user
      summary: Returns user's jwtToken
      description: login User
      operationId: loginUser
      requestBody:
        description: User Credentials
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUser"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /changepassword:
    post:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Change the users password
      description: Changing password
      operationId: changepwd
      requestBody:
        description: password Change
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePwd"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChangePasswordResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /user/all:
    get:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Returns all users in array
      description: Get all Users
      operationId: getAllUsers
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAllResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /update/shipping:
    patch:
      tags:
        - user
      security:
        - bearerAuth: []
      summary: Updating the User's Shipping address
      description: Changing password
      operationId: addShipping
      requestBody:
        description: add or update Shipping
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Shipping"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateShippingResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  #cart
  /cart:
    post:
      tags:
        - Cart
      security:
        - bearerAuth: []
      summary: Return the cart object
      description: ""
      operationId: addCart
      requestBody:
        description: Product Details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCart"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cart/view:
    get:
      tags:
        - Cart
      security:
        - bearerAuth: []
      summary: Return cart of user
      description: ""
      operationId: getCart
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetCartResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cart/update:
    patch:
      tags:
        - Cart
      security:
        - bearerAuth: []
      summary: Return Updated cart object
      description: ""
      operationId: updateCart

      requestBody:
        description: Product Details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCart"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateCartResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cart/all/delete:
    delete:
      tags:
        - Cart
      security:
        - bearerAuth: []
      summary: Delete cart of user
      description: ""
      operationId: deleteAllCart
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteAllCartResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /cart/delete/{id}:
    delete:
      tags:
        - Cart
      security:
        - bearerAuth: []
      summary: Delete cart of user
      description: ""
      operationId: delete product by id
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteProductCartResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  #Wish-List
  /wishlist:
    get:
      tags:
        - Wish-List
      security:
        - bearerAuth: []
      summary: Returns products in wishlist
      operationId: getWishlist
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetWishListResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  /wishlist/add:
    post:
      tags:
        - Wish-List
      security:
        - bearerAuth: []
      summary: Return Wishlist object
      description: ""
      operationId: addWishlist
      requestBody:
        description: product Details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateWishlist"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WishList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /Wishlist/remove/{id}:
    delete:
      tags:
        - Wish-List
      security:
        - bearerAuth: []
      summary: Remove Product by user
      description: ""
      operationId: deleteItemsWishlistUser
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteProductWishListResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /Wishlist/remove:
    delete:
      tags:
        - Wish-List
      security:
        - bearerAuth: []
      summary: Remove all Products
      description: ""
      operationId: deleteAllItemsWishlist
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteAllWishListResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"

  #Products
  /product/create:
    post:
      tags:
        - Product
      security:
        - bearerAuth: []
      summary: Returns a Product object
      operationId: createProduct
      requestBody:
        description: Create Product
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProduct"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /product/remove/{id}:
    delete:
      tags:
        - Product
      security:
        - bearerAuth: []
      summary: Remove Product by Admin or seller or both
      description: ""
      operationId: DeleteproductByAdmin
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteProductResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /product/update/{id}:
    patch:
      tags:
        - Product
      security:
        - bearerAuth: []
      summary: Update Product by Admin
      description: ""
      operationId: UpdateproductByAdmin
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      requestBody:
        description: product Details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProduct"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateProductResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /product/all:
    get:
      tags:
        - Product
      security:
        - bearerAuth: []
      summary: Return all Products in array
      description: ""
      operationId: getProducts
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAllResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /product/{id}:
    get:
      tags:
        - Product
      security:
        - bearerAuth: []
      summary: Return all Products in array
      description: ""
      operationId: getProductById
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductByIdResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  #orders
  /order:
    post:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Return Order object
      description: ""
      operationId: createOrder
      requestBody:
        description: Order Details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateOrder"
        required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /order/by/cart:
    post:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Return Order object
      description: ""
      operationId: createOrderByCart
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /order/all:
    get:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Return all orders in array by Admin
      description: ""
      operationId: getAllOrdersByAdmin
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllOrdersResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /order/cancel/{id}:
    delete:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Deletes order
      description: ""
      operationId: deleteProductById
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CancelOrderResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /order/user:
    get:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Return all orders in array by User
      description: ""
      operationId: getorderbyUser
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllOrdersByUserResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
  /order/find/{id}:
    get:
      tags:
        - Order
      security:
        - bearerAuth: []
      summary: Return all orders in array by User
      description: ""
      operationId: getorderItemsOfUser
      parameters:
        - name: id
          in: path
          schema:
            type: number
          required: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AllOrdersByUserResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/ServerError"
#components
components:
  schemas:
    CreateUser:
      allOf:
        - type: object
          properties:
            name:
              type: string
              example: jaiganeshan
            email:
              type: string
              example: gjai456@gmail.com
            password:
              type: string
              example: Mypassword@07
            role:
              type: string
              example: both
    LoginUser:
      allOf:
        - type: object
          properties:
            email:
              type: string
              example: fakemail@gmail.com
            password:
              type: string
              example: 123456789
    ChangePwd:
      allOf:
        - type: object
          properties:
            oldPassword:
              type: string
              example: "123456789"
            newPassword:
              type: string
              example: "12345678"
    Shipping:
      allOf:
        - type: object
          properties:
            shipping_address:
              type: string
              example: "fake Address"
    CreateCart:
      allOf:
        - type: object
          properties:
            product_id:
              type: number
              example: 1
            quantity:
              type: number
              example: "1"
    CreateWishlist:
      allOf:
        - type: object
          properties:
            product_id:
              type: number
              example: 1
    CreateProduct:
      allOf:
        - type: object
          properties:
            product_name:
              type: string
              example: product 1
            description:
              type: string
              example: Sample Description
            unit_price:
              type: number
              example: 100
            number_in_stock:
              type: number
              example: 500
    CreateOrder:
      allOf:
        - type: object
          properties:
            product:
              type: array
              items:
                $ref: "#/components/schemas/CreateCart"
    User:
      allOf:
        - type: object
          properties:
            user_id:
              type: number
              example: 1
            name:
              type: string
              example: jaiganeshan
            email:
              type: string
              example: gjai456@gmail.com
            password:
              type: string
              example: hU2FsdGVkX1/9EGiIHWWZoxRKk6GnpWHzxMbjg+GlZis=
            shipping_address:
              type: string
              example: null
            createdAt:
              type: string
              example: "2021-11-24T11:52:25.677Z"
            updatedAt:
              type: string
              example: "2021-11-24T11:52:25.677Z"
    LoginResult:
      allOf:
        - type: object
          properties:
            token:
              type: string
              example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJyb2xlIjoiYm90aCIsImlhdCI6MTYzNzc1OTI3MiwiZXhwIjoxNjM4MDE4NDcyfQ.3raSg_R7-eeFY4per-KkZszOBvilOZq6ZlBM67PocBk"
    ChangePasswordResult:
      allOf:
        - type: object
          properties:
            message:
              type: string
              example: "Successfully Changed"
    UserAllResult:
      allOf:
        - type: array
          items:
            $ref: "#/components/schemas/User"
    UpdateShippingResult:
      allOf:
        - type: object
          properties:
            message:
              type: string
              example: "updated Successfullt or no changes made"
    #cartResults
    Cart:
      allOf:
        - type: object
          properties:
            user_id:
              type: number
              example: 1
            product_id:
              type: number
              example: 1
            quantity:
              type: number
              example: 10
            createdAt:
              type: string
              example: "2021-11-24T11:52:25.677Z"
            updatedAt:
              type: string
              example: "2021-11-24T11:52:25.677Z"
    GetCartResult:
      allOf:
        - type: array
          items:
            type: object
            properties:
              product_id:
                type: number
                example: 1
              product_name:
                type: string
                example: product 1
              description:
                type: string
                example: description
              quantity:
                type: number
                example: 10
    UpdateCartResult:
      allOf:
        - type: object
          properties:
            message:
              type: string
              example: "Updated Successfully"

    DeleteAllCartResult:
      allOf:
        - type: object
          properties:
            message:
              type: string
              example: "removed Successfully"
    DeleteProductCartResult:
      allOf:
        - type: object
          properties:
            message:
              type: string
              example: "Product Removed Successfully"
    #wishlistResults
    WishList:
      allOf:
        - type: object
          properties:
            user_id:
              type: number
              example: 1
            product_id:
              type: number
              example: 1
            createdAt:
              type: string
              example: "2021-11-24T11:52:25.677Z"
            updatedAt:
              type: string
              example: "2021-11-24T11:52:25.677Z"
    GetWishListResult:
      allOf:
        - type: array
          items:
            type: object
            properties:
              product_id:
                type: number
                example: 1
              product_name:
                type: string
                example: product 1
              description:
                type: string
                example: description
    DeleteAllWishListResult:
      allOf:
        - type: object
          properties:
            message:
              type: string
              example: "Removed Successfully or no changes made"
    DeleteProductWishListResult:
      allOf:
        - type: object
          properties:
            message:
              type: string
              example: "Removed Successfully or No product to remove"
    #productResult
    Product:
      allOf:
        - type: object
          properties:
            product_id:
              type: number
              example: 1
            product_name:
              type: string
              example: product 1
            description:
              type: string
              example: Description about product
            unit_price:
              type: number
              example: 599
            number_in_stock:
              type: number
              example: 100
            seller_name:
              type: string
              example: Alex
            createdAt:
              type: string
              example: "2021-11-24T11:52:25.677Z"
            updatedAt:
              type: string
              example: "2021-11-24T11:52:25.677Z"

    DeleteProductResult:
      allOf:
        - type: object
          properties:
            message:
              type: string
              example: "Product Removed Successfully"
    UpdateProductResult:
      allOf:
        - type: object
        - $ref: "#/components/schemas/Product"
    ProductAllResult:
      allOf:
        - type: array
          items:
            $ref: "#/components/schemas/Product"
    ProductByIdResult:
      allOf:
        - type: object
        - $ref: "#/components/schemas/Product"
    #orderResult
    Order:
      allOf:
        - type: object
          properties:
            message:
              type: string
              example: "Order Placed Successfully"
    CancelOrderResult:
      allOf:
        - type: object
          properties:
            message:
              type: string
              example: "Order Cancelled"
    AllOrdersResult:
      allOf:
        - type: array
          items:
            type: object
            properties:
              user_id:
                type: number
                example: 1
              name:
                type: string
                example: Alex
              orders:
                type: array
                items:
                  type: object
                  properties:
                    user_id:
                      type: number
                      example: 1
                    order_id:
                      type: number
                      example: 1
                    date:
                      type: string
                      example: 10-11-2021
                    createdAt:
                      type: string
                      example: "2021-11-24T14:15:14.000Z"
                    updatedAt:
                      type: string
                      example: "2021-11-24T14:15:14.000Z"

    AllOrdersByUserResult:
      allOf:
        - type: array
          items:
            type: object
            properties:
              user_id:
                type: number
                example: 1
              order_id:
                type: number
                example: 1
              totalprice:
                type: number
                example: 16000

  #responses
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Error Message"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Unauthorized
    BadRequest:
      description: BadRequest
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Error Message"
    ServerError:
      description: BadRequest
      content:
        application/json:
          schema:
            type: string
            example: Something Failed!

  #security Schemes
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
#response Schemes
